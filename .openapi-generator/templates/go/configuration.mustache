{{>partial_header}}
package {{packageName}}

import (
    "crypto/tls"
    "crypto/x509"
	"fmt"
	"net/http"
	"os"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	{{#hasOAuthMethods}}
	// ContextOAuth2 takes an oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	{{/hasOAuthMethods}}
	{{#hasHttpBasicMethods}}
	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	{{/hasHttpBasicMethods}}
	{{#hasHttpBearerMethods}}
	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	{{/hasHttpBearerMethods}}
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

{{#withAWSV4Signature}}
// AWSv4 provides AWS Signature to a request passed via context using ContextAWSv4
// https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
type AWSv4 struct {
	AccessKey string
	SecretKey string
	SessionToken string
	Region string
	Service string
}

{{/withAWSV4Signature}}

{{#withCustomMiddlewareFunction}}
// MiddlewareFunction provides way to implement custom middleware
type MiddlewareFunction func(*http.Request)

{{/withCustomMiddlewareFunction}}
// Configuration stores the configuration of the API client
type Configuration struct {
	Host                     string            `json:"host,omitempty"`
	DefaultHeader            map[string]string `json:"defaultHeader,omitempty"`
	UserAgent                string            `json:"userAgent,omitempty"`
	Debug                    bool              `json:"debug,omitempty"`
	ClientCertificatePath    string            `json:"clientCertificatePath,omitempty"`
	ClientCertificateKeyPath string            `json:"clientCertificateKeyPath,omitempty"`
	CaCertificatePath        string            `json:"caCertificatePath,omitempty"`
	HTTPClient               *http.Client
	{{#withCustomMiddlewareFunction}}
	Middleware               MiddlewareFunction
	{{/withCustomMiddlewareFunction}}
	clientTlsCertificate     *tls.Certificate
	caCertificates           []*x509.Certificate
}

// NewConfiguration returns a new Configuration object
func NewConfiguration() *Configuration {
	cfg := &Configuration{
		DefaultHeader:    make(map[string]string),
		UserAgent:        "{{{httpUserAgent}}}{{^httpUserAgent}}OpenAPI-Generator/{{{packageVersion}}}/go{{/httpUserAgent}}",
		Debug:            false,
	}

	// Get hostname from environment variable
	hostname := os.Getenv("SIGNSERVER_HOSTNAME")
	if hostname != "" {
		if hostname, err := cleanHostname(hostname); err == nil {
			cfg.Host = hostname
		} else {
			fmt.Errorf("SIGNSERVER_HOSTNAME is not a valid URL: %s", err)
		}
	}

	// Get client certificate path from environment variable
	clientCertPath := os.Getenv("SIGNSERVER_CLIENT_CERT_PATH")
	if (clientCertPath != "") {
		cfg.ClientCertificatePath = clientCertPath
	}

	// Get client certificate key path from environment variable
	clientCertKeyPath := os.Getenv("SIGNSERVER_CLIENT_CERT_KEY_PATH")
	if (clientCertKeyPath != "") {
		cfg.ClientCertificateKeyPath = clientCertKeyPath
	}

    // Get CA certificate path from environment variable
    caCertPath := os.Getenv("SIGNSERVER_CA_CERT_PATH")
    if (caCertPath != "") {
        cfg.CaCertificatePath = caCertPath
    }

	return cfg
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}

func (c *Configuration) SetClientCertificate(clientCertificate *tls.Certificate) {
	if clientCertificate != nil {
		c.clientTlsCertificate = clientCertificate
	}
}

func (c *Configuration) SetCaCertificates(caCertificates []*x509.Certificate) {
	if caCertificates != nil {
		c.caCertificates = caCertificates
	}
}
